

2012-06-08 04:28        src/ButtonAndScrollComponent.java         Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.go;
    2	import javax.swing.BoxLayout;
    3	import javax.swing.JComponent;
    4	import javax.swing.JButton;
    5	import java.awt.event.ActionListener;
    6	import java.awt.event. ActionEvent;
    7	import javax.swing.JTextArea;
    8	import javax.swing.ScrollPaneConstants;
    9	import javax.swing.JScrollPane;
   10	
   11	public class ButtonAndScrollComponent extends JComponent
   12	{
   13	    private MessageDestination md;
   14	    private GoGame game;
   15	
   16	    private JButton sur = new JButton();
   17	
   18	    public ButtonAndScrollComponent(GoGame game, MessageDestination md){
   19		super();
   20		this.game=game;
   21		this.md = md;
   22		
   23		this.setLayout(new BoxLayout(this,1));
   24		
   25		sur.addActionListener(new ButtonListener());
   26	        
   27		//	JTextAreaMessageDestination text = new JTextAreaMessageDestination(10,30);
   28		JScrollPane scroller = new JScrollPane((JTextAreaMessageDestination)md);
   29		scroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
   30		scroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
   31		JButton sur = new JButton("Surrender");
   32		sur.addActionListener(new ButtonListener());
   33		this.add(scroller);
   34		this.add(sur);
   35	    }
   36	
   37	    class ButtonListener implements ActionListener {
   38		
   39		public ButtonListener(){
   40	
   41		    super();
   42		}
   43		
   44		public void actionPerformed (ActionEvent event) {
   45		    char turn = game.getTurn();
   46		    if(turn==' ')
   47			return;
   48		    if (turn=='B'){
   49		        game.setSurrender2(true);
   50			game.setTurn('W');
   51		    }
   52		    if(turn=='W'){
   53			game.setSurrender1(true);
   54			game.setTurn('B');
   55		    }
   56		    if(game.getSurrender1() && game.getSurrender2()){







2012-06-08 04:28        src/ButtonAndScrollComponent.java         Page 2


   57			game.setSurrendering();
   58			char winner = game.getWinner();
   59			game.setWinner(winner);
   60			if(winner == ' ')
   61			    md.append("shoot, it's a draw!");
   62			else
   63			    md.append(winner + " wins! Congratulations!");
   64		    }
   65		}
   66	    }
   67	
   68	    public MessageDestination getmd()
   69	    {
   70		return md;
   71	    }
   72	}















































2012-06-08 04:55               src/GoComponent.java               Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.go;
    2	import java.awt.GridLayout;
    3	import javax.swing.JComponent;
    4	import javax.swing.JButton;
    5	import java.awt.event.ActionListener;
    6	import java.awt.event. ActionEvent;
    7	import java.awt.Font;
    8	import java.util.ArrayList;
    9	import javax.swing.JTextArea;
   10	
   11	/**
   12	 * An Swing component for playing go
   13	
   14	  
   15	   @author David Winkenwerder and Dustin Henderson
   16	*/
   17	
   18	public class GoComponent extends JComponent
   19	{
   20	    private GoGame game;
   21	    private MessageDestination md;
   22	
   23	    private JButton [] buttons = new JButton[362];
   24	
   25	    /** Constructor
   26		
   27		@param game an object that implements the GoGame interface to keep track
   28		            of the moves in each game, ensuring the rules are followed and detecting
   29			                when someone has won.
   30					@param md an object that implements the MessageDestination interface.  This is just
   31					           a place to send any messages that need to be communicated to the user.
   32						      Making this separate allows a user of this components to decide to
   33						         send those messages to the console, or to a variety of different
   34							    swing Widgets, or even to a web page, as needed.
   35	    */
   36	       
   37	    public GoComponent(GoGame game, MessageDestination md) {
   38		super(); // is this line necessary?  what does it do?
   39		
   40		this.game = game;  // the Go game
   41		this.md = md;  // a place we can write messages to
   42	
   43		// note columns ignored when rows are set
   44		// number of columns is implicit from the number of things added
   45	
   46		this.setLayout(new GridLayout(19,0)); 
   47		for(int i=1; i<=361; i++) {
   48		    JButton jb = new JButton("");
   49		    buttons[i] = jb;
   50		    jb.addActionListener(new ButtonListener(i));
   51		    this.add(jb);
   52		}
   53		
   54	    }    
   55	
   56	







2012-06-08 04:55               src/GoComponent.java               Page 2


   57	    class ButtonListener implements ActionListener {
   58		private int num;
   59	
   60		public ButtonListener(int i) {
   61		    super();  // is this line necessary? what does it do?
   62		    this.num = i;
   63		}
   64	
   65		public void actionPerformed (ActionEvent event) {
   66		    char turn=game.getTurn();
   67		    if (turn==' ')
   68			return;
   69		    if (!game.isBlank(num)) {
   70			md.append("That square is already occupied!\n");
   71			return;
   72		    }  
   73		    game.setGrid(num,turn);
   74		    if(game.checkSurrounded(num)){
   75			md.append("Cannot place tile there, it would be surrounded\n");
   76			return;
   77			    }
   78		    game.setGrid(num,' ');
   79		    char winner=game.move(num);
   80		    JButton jb = buttons[num];
   81		    jb.setFont(new Font("sansserif",Font.BOLD,12));
   82		    jb.setText(Character.toString(turn)); // this is how we convert char to String
   83		    for(int i=1;i<362;i++){
   84			if(game.charAt(i)!=' '){
   85			    buttons[i].setText(Character.toString(game.charAt(i)));
   86			    }
   87			else
   88			    buttons[i].setText("");
   89		    }
   90			
   91		    // check for a winner
   92		    if (winner=='D')
   93			md.append("Phooey.  It's a draw.\n");
   94		    else if (winner!=' ')
   95			md.append(winner + " wins!\n");
   96		}
   97	    }
   98	
   99	}




















2012-06-08 04:53                 src/GoGame.java                  Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1;
    2	/**
    3	 An interface for Go games
    4	  
    5	   @author David Winkenwerder and Dustin Henderson
    6	   @version CS56 cp1 05.11.2012
    7	   @see GoGrid
    8	   @see GoComponent
    9	   @see Go
   10	 */
   11	public interface GoGame 
   12	{
   13	    /** returns 'B' or 'W' depending on whose turn it is.  Returns ' ' if game over.
   14	     */
   15	    public char getTurn();
   16	
   17	    /** used to set the turn
   18	     */
   19	    public void setTurn(char turn);
   20	
   21	    /** is this square blank.  Should be called before move() to see
   22		whether the move is legal.  
   23		@param i number between 1 and 361 indicating square
   24		@return whether square is blank or not.
   25	    */
   26	    public boolean isBlank(int i);
   27	
   28	    /**	play the next move. if isBlank(i) is not true, will throw
   29		GoIllegalMoveException.
   30	
   31		@param i number between 1 and 361 indicating square, 
   32		       organized like a telephone grid.  If i is already occupied,
   33		       a GoMoveException is thrown.
   34		@return winner 'B', 'W', or 'D' for draw, or ' ' for none yet.
   35	     */
   36	    public char move(int i) throws GoIllegalMoveException;
   37	
   38	
   39	    /** Allows the game to end when both parties are surrendering
   40	     */
   41	    public char getWinner();
   42	
   43	    /** Allows to set surrendering condition true
   44	     */
   45	    public void setSurrendering();
   46	
   47	    public String toString();
   48	    
   49	    public char charAt(int i);
   50	
   51	    public boolean getSurrender1();
   52	    
   53	    public void setSurrender1(boolean boo);
   54	    
   55	    public boolean getSurrender2();
   56	    







2012-06-08 04:53                 src/GoGame.java                  Page 2


   57	    public void setSurrender2(boolean boo);
   58	
   59	    public char setWinner(char a);
   60	    
   61	    public boolean checkSurrounded(int num);
   62	    public void setGrid(int i, char c);
   63	}
























































2012-06-08 04:52                 src/GoGrid.java                  Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1;
    2	
    3	import java.util.ArrayList;
    4	/**
    5	 * A grid for playing Go, with numbers according to row, 1-19 being the first row
    6	   and 20-39 being the next, etc.
    7	
    8	
    9	   @author David Winkenwerder and Dustin Henderson
   10	   @version CS56 choicepoints 5/16/12
   11	   @see GoGridTest
   12	*/
   13	public class GoGrid implements GoGame
   14	{
   15	
   16	    private ArrayList<Character> grid = new ArrayList<Character>();
   17	    private int numMoves=0;
   18	    private char turn = 'W';
   19	    private char winner = ' ';
   20	    private boolean gameOver = false;
   21	    private boolean surrender1 = false; boolean surrender2=false; boolean surrendering = false;
   22	    //add spaces to the game state equal to the number of spaces on the board: 362.
   23	    
   24	    /**
   25	     * Default constructor for objects of the class GoGrid
   26	     */
   27	    public GoGrid() {	
   28		grid.add('_');
   29		for(int i=0;i<362; i++)
   30		{
   31		    grid.add(' ');
   32		}
   33	
   34	    }
   35	
   36	    public void setTurn(char turn){
   37		this.turn = turn;
   38	    }
   39	
   40	    public void setSurrendering() {
   41		this.surrendering = true;
   42	    }
   43		
   44	    public void setGrid(int i, char c){
   45		grid.set(i,c);
   46	    }
   47	    //NOT DONE, reason a large enough change to user functionality that it could go along with the GUI to be created in CP3.
   48	    /**
   49	     Constructor for objects of class GoGrid that allows
   50	     creation of games in middle of play. This is mostly for testing.
   51	
   52	     There should be an equal number of B's and Ws
   53	     (in which case it is the Ws turn) or else
   54	     1 more W that there are Bs (in which case it is Bs turn),
   55	     otherwise IllegalArgumentException("illegal game state") is thrown.
   56	







2012-06-08 04:52                 src/GoGrid.java                  Page 2


   57	     @param gameState 362 character string with Ws and Bs for positions 1-362
   58	     @return turn 'B' or 'W' for turn
   59	    */
   60	    //DONE
   61	    public char GoGrid(ArrayList gameState) {
   62		this.grid = gameState;
   63		    return turn;
   64	    }
   65	
   66	    /**
   67	       @param i is number of square (like telephone pad)
   68	       @return 'B','W', or ' '--i.e. contents of square i
   69	     */ 
   70	    //DONE
   71	
   72	    public char charAt(int i)
   73	    {
   74	        return grid.get(i);
   75	    }
   76	
   77	    /**
   78	       isSurrounded checks to see if the piece selected is surrounded
   79	       the other players pieces. it returns true if surrounded, 
   80	       and false, if it is not.
   81	    */
   82	    
   83	    public boolean checkSurrounded(int i)
   84	    {
   85		char color = grid.get(i);
   86	        ArrayList<Integer> visited = new ArrayList<Integer>();
   87		ArrayList<Integer> canVisit = new ArrayList<Integer>();
   88		canVisit.add(i);
   89		while(canVisit.size()>0)
   90		    {
   91			if(!checkSurroundedHelper(canVisit.get(0),color,visited,canVisit))
   92			    return false;
   93		    }
   94		for(int in: visited)
   95		    {
   96			grid.set(in,' ');
   97		    }
   98		return true;
   99	    }
  100	    //NOT DONE reason The two work fine as seperate, and we may come back and make them recursive for CP3.
  101	
  102	    public boolean checkSurroundedHelper(int i,char color,ArrayList visited,ArrayList canVisit) //DONE
  103	    {
  104		if(!visited.contains(i)) 
  105		    {
  106			if(grid.get(i)==' ')
  107			    return false;
  108			if(grid.get(i)!=color)
  109			    {
  110				canVisit.remove(canVisit.indexOf(i));
  111			    return true;
  112			    }







2012-06-08 04:52                 src/GoGrid.java                  Page 3


  113			//System.out.println("b");
  114			visited.add(i);
  115			int v;
  116			if((v=canVisit.indexOf(i))!=-1)
  117			    canVisit.remove(v);
  118			//find the four neighbors
  119			//if not in can visit and not over an edge, add it to canvisit
  120			if((i)%19!=0)
  121			    {
  122				if(canVisit.indexOf(i)==-1)
  123				    if(!visited.contains(i+1))
  124					canVisit.add(i+1);
  125			    }
  126			if((i)%19!=1)
  127			    {
  128				if(canVisit.indexOf(i)==-1)
  129				    if(!visited.contains(i-1))
  130					canVisit.add(i-1);
  131			    }
  132			if((i+19)<362)
  133			    {
  134				if(canVisit.indexOf(i)==-1)
  135				    if(!visited.contains(i+19))
  136					canVisit.add(i+19);
  137			    }
  138		       	if((i-19)>0)
  139			    {
  140				if(canVisit.indexOf(i)==-1)
  141				    if(!visited.contains(i-19))
  142					canVisit.add(i-19);
  143			    }
  144		    }
  145		int v;
  146		if((v=canVisit.indexOf(i))!=-1)
  147		    canVisit.remove(v);
  148		return true;
  149		
  150	
  151	
  152	    }
  153	
  154	
  155	    /** This private convenience method sets the gameOver and winner variables,
  156		and then returns the winner. It is simply a way to factor out
  157		common code from all the cases in getWinner */
  158	
  159	    public char setWinner(char c) 
  160	    {
  161		this.gameOver = true;
  162		this.winner = c;
  163		this.turn = ' ';
  164	        return c;
  165	    }
  166	    
  167	    /**
  168	       @return 'W' or 'B' if there is a winner, ' ' if there is not







2012-06-08 04:52                 src/GoGrid.java                  Page 4


  169	     */
  170	
  171	    public char getWinner() 
  172	    {
  173		char result;
  174		
  175		if(gameOver)
  176		    return winner;
  177		int blackCount=0;
  178		int whiteCount=0;
  179		if(surrendering){
  180		    for(char c : grid)
  181			{
  182			    if(c=='B')
  183				blackCount++;
  184			    if(c=='W')
  185				whiteCount++;
  186			}
  187		    if(blackCount>whiteCount)
  188			setWinner('B');
  189		    else if(whiteCount>blackCount)
  190			setWinner('W');
  191		    else
  192			setWinner(' ');
  193		}
  194		return winner;
  195	    }
  196	
  197	    /** is this square blank. Should be called before move() to see
  198		whether the move is legal.
  199	
  200	
  201		
  202		@param i number between 1 and 361 indicating square
  203		@return whether square is blank or not.
  204		@throws IllegalArguementException if i is not between 1 and 361 (inclusive)
  205	    */
  206	    public boolean isBlank(int i)
  207	    {
  208		return(grid.get(i)==' ');
  209	    }
  210	
  211	    /**
  212	       play the next move. if isBlank(i) is not true, will throw
  213	       GoIllegalMoveException
  214	
  215	       @param i number between 1 and 361 indicating square,
  216	       organized like a telephone grid. If i is already occupied,
  217	       a GoIllegalMoveException is thrown.
  218	       @return winner 'B', 'W', or 'D' for draw, or ' ' for none yet.
  219	    */
  220	    public char move(int i) throws GoIllegalMoveException{
  221		/* indexes go from 0 to 361.
  222		   Second substring has 362 as last param because second param
  223		   to substring is first index NOT included in subsequence.
  224		*/







2012-06-08 04:52                 src/GoGrid.java                  Page 5


  225		if(!this.isBlank(i))
  226		    throw new GoIllegalMoveException("Square "+i+" occupied\n");
  227		//if(this.checkSurrounded(i))
  228		//  throw new GoIllegalMoveException("Cannot place piece here, it would be surrounded.\n");
  229		grid.set(i,turn);
  230		if(i+1<362)
  231	    checkSurrounded(i+1);
  232		if(i-19>0)
  233		    checkSurrounded(i-19);
  234		if(i-1>0)
  235		    checkSurrounded(i-1);
  236		if(i+19<362)
  237		    checkSurrounded(i+19);
  238		turn = (turn=='W')?'B':'W'; //change turn
  239		numMoves++;
  240	
  241		return this.getWinner(); //may change gameOver and winner as side effect
  242	    }
  243	
  244	
  245	
  246	    /** Return game state as a 361 character string.
  247		This is mostly for testing purposes.
  248		
  249		@param game state string
  250	    */
  251	
  252	    public String getGameState()
  253	    {
  254		ArrayList retval = new ArrayList();
  255		retval = grid;
  256		retval.remove(0);
  257		return retval.toString();
  258	    }
  259	
  260	
  261	    /**
  262	       return the Go grid with the contents
  263	    */
  264	
  265	    public String toString()
  266	    {
  267		final String gridLine = "-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-";
  268		String result = "";
  269		int i,j;
  270		result +=gridLine + "\n";
  271		for(i=0;i<19;i++)
  272		    {
  273			for(j=1;j<20;j++)
  274			    {
  275				if(i!=19)
  276				    result = result + grid.get(j+i*19)+ "|";
  277				else
  278				    result = result + grid.get(j+i*19);
  279			    }
  280			result+= "\n";







2012-06-08 04:52                 src/GoGrid.java                  Page 6


  281		
  282		    }
  283			result +="\n" + gridLine;
  284			return result;
  285	    }
  286	
  287	
  288	public char getTurn()
  289	{
  290	    return turn;
  291	
  292	}
  293	
  294	public boolean getSurrender1(){
  295	    return surrender1;
  296	}
  297	public void setSurrender1(boolean boo){
  298	
  299	    this.surrender1=boo;
  300	    }
  301	
  302	public boolean getSurrender2(){
  303	    return surrender2;
  304	}
  305	public void setSurrender2(boolean boo){
  306	
  307	    this.surrender2=boo;
  308	    }
  309	
  310	
  311	}
































2012-06-08 04:12                 src/GoGui1.java                  Page 1


    1	// package edu.ucsb.cs56.S12.dwinkenwerder.lab06;
    2	import javax.swing.JFrame;
    3	import java.awt.ComponentOrientation;
    4	import javax.swing.BoxLayout;
    5	import java.awt.Dimension;
    6	
    7	/** GoGui01.java is a GUI interface for TicTacToe that uses
    8	    the JTextArea as the destination for messages.
    9	
   10	     @author David Winkenwerder and Dustin Henderson
   11	     @version CS56, Spring 2011, UCSB
   12	*/
   13	
   14	public class GoGui1 {
   15	
   16	    /** main method to fire up a JFrame on the screen  
   17	          @param args not used
   18	    */
   19	
   20	    public static void main (String[] args) {
   21		JFrame frame = new JFrame() ;
   22		frame. setDefaultCloseOperation(JFrame. EXIT_ON_CLOSE) ;
   23		char winner=' ';
   24		boolean surrender1=false;boolean surrender2=false;
   25	
   26	
   27		// since GoGrid implements the GoGame interface,
   28		// we can use GoGame on left hand side.
   29		frame.getContentPane().setLayout(new BoxLayout(frame.getContentPane(),0));
   30		GoGame game = new GoGrid();
   31		MessageDestination md = new JTextAreaMessageDestination(4,4);
   32		ButtonAndScrollComponent basc = new ButtonAndScrollComponent(game, md);
   33		GoComponent gc = new GoComponent(game, basc.getmd());
   34		gc.setPreferredSize(new Dimension(1200,800));
   35		basc.setPreferredSize(new Dimension(600,800));
   36		frame.getContentPane().add(gc);
   37		frame.getContentPane().add(basc);
   38		// to make sure that grids go left to right, no matter what
   39	
   40		frame .applyComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
   41		frame. setResizable(false);
   42		frame. setSize(1800,800) ;
   43		frame. setVisible(true) ;
   44	
   45		if(game.getSurrender1() && game.getSurrender2()){
   46		    game.setSurrendering();
   47		    winner=game.getWinner();
   48		}
   49	
   50	    }
   51	}












2012-05-18 03:03         src/GoIllegalMoveException.java          Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1
    2	/**
    3	   Exception for illegal move in Go. Its used in the GoGrid file.
    4	   @author David Winkenwerder and Dustin Henderson
    5	   @version CS56 Spring 2012, UCSB
    6	   @see GoGrid
    7	*/
    8	    public class GoIllegalMoveException extends RuntimeException {
    9	    // we have to declare this, because we declaired the other one, so this wont get made automaticly
   10	    public GoIllegalMoveException () {};
   11	    public GoIllegalMoveException (String messege) {
   12		super(messege);
   13	    }
   14	}

















































2012-06-01 17:53                   src/Go.java                    Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1;
    2	
    3	import java.util.Scanner;
    4	
    5	/**
    6	   A Text UI for playing Go.
    7	
    8	  
    9	   @author David Winkenwerder and Dustin Henderson
   10	   @version CS56 cp1 05.17.2012
   11	   @see GoGridTest
   12	 */
   13	public class Go
   14	{
   15	    
   16	    public static void main(String [] args) {
   17		
   18		Scanner sc = new Scanner(System.in);
   19		boolean done = false;
   20		char winner=' ';
   21		boolean surrender1=false;boolean surrender2=false;
   22		
   23		// GoGrid implements GoGame
   24		GoGame g = new GoGrid();
   25		
   26		while (!done) {
   27		   System.out.println(g); // g.toString() implicitly invoked
   28		   System.out.print(g.getTurn() + "'s move: ");
   29		   System.out.println("Enter the space to place your tile, or press 0 to pass.");
   30		   String line  = sc.nextLine();
   31		 
   32		   int num = 0;
   33		   try {
   34		       num = Integer.parseInt(line);
   35		       if(num==0 && g.getTurn()=='B'){
   36			   surrender1=true;
   37			   g.setTurn('W');
   38		       }
   39		       else if(num == 0 && g.getTurn()=='W'){
   40			   surrender2=true;
   41			   g.setTurn('B');
   42		       }
   43		       else if (g.isBlank(num)) {
   44			   winner = g.move(num);		   
   45			   done = (winner!=' ');
   46		       }
   47		       else
   48			   System.out.println("Space " + num + " is already occupied");
   49		   } catch ( NumberFormatException nfe ) {
   50		       System.out.println("You entered: " + line);
   51		       System.out.println("Instead, please enter a number between 1 and 361 of a space not occupied.");
   52		   }
   53		   if(surrender1 && surrender2){
   54		       g.setSurrendering();
   55		       winner = g.getWinner();
   56		       done=true;







2012-06-01 17:53                   src/Go.java                    Page 2


   57		   }
   58		 }
   59		System.out.println(g); // g.toString() implicitly invoked
   60		if (winner==' ')
   61		    System.out.println("Game was a draw");
   62		else
   63		    System.out.println(winner + " wins!");
   64		System.out.println("Goodbye!");
   65	    }
   66	
   67	}




















































2012-05-18 04:12       src/JTextAreaMessageDestination.java       Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1;
    2	import javax.swing.JTextArea;
    3	
    4	/**
    5	 A JTextArea object that implements the MessageDestination interface.
    6	 Used in TicTacToeComponent.
    7	  
    8	   @author David Winkewerder and Dustin Henderson
    9	   @version CS56 lecture notes 05.17.2012
   10	   @see GoComponent
   11	 */
   12	public class JTextAreaMessageDestination extends JTextArea implements MessageDestination
   13	{
   14	    /** 
   15		Create a JTextArea that implements the MessageDestination interface.  This is a direct
   16		pass-thru to the JTextArea constructor.
   17	
   18		@param rows (see documentation for javax.swing.JTextArea)
   19		@param cols (see documentation for javax.swing.JTextArea)
   20		@see javax.swing.JTextArea
   21	    */
   22		
   23	    public JTextAreaMessageDestination(int rows, int cols) {
   24		super(rows, cols);
   25	    }
   26	
   27	    // there is already a public void append(String msg); method in JTextArea
   28	    // so that's all we have to do.
   29	}


































2012-05-18 03:47           src/MessageDestination.java            Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1;
    2	
    3	/**
    4	 An interface to represent a place to send messages.
    5	 Used in GoComponent
    6	  
    7	   @author Phill David Winkenwerder and Dustin Henderson
    8	   @version CS56 cp1 05.17.2012
    9	   @see GoComponent
   10	 */
   11	public interface MessageDestination
   12	{
   13	    /** 
   14		Get this string to the user
   15		@param msg String to send to the user
   16	     */
   17	
   18	    public void append(String msg);
   19	
   20	}











































2012-05-18 03:44       src/SystemOutMessageDestination.java       Page 1


    1	//package edu.ucsb.cs56.S12.dwinkenwerder.cp1
    2	
    3	/**
    4	   An interface to represent a place to send messages. Used in GoComponent
    5	   
    6	   @author David Winkenwerder and Dustin Henderson
    7	   @version CS56 cp1 05.17.2012
    8	   @see GoComponent
    9	*/
   10	public class SystemOutMessageDestination implements MessageDestination
   11	{
   12	    /**
   13	       Get this string to the user via System.out
   14	       @param msg message to display to user
   15	    */
   16	    
   17	    public void append(String msg)
   18	    {
   19		System.out.println(msg);
   20	    }
   21	}








































